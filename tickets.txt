UI/UX/UR/UE
no input validation (how many params)
input as csv
1 prmtop for the entire system -> one topology
1 molmodel compound for 1 molecule -> 1 topology has all molecules
remove index mapping
molmodel memory error in compound
state reporter for pdb, dcd, csv for all energies
mass repartition
can we eliminate bond centers? what does matchConfiguration() do?
do the rng generate random bits at the beginning?
why is dumm this big? is there any redundant code?

tests:
copy tests from all dependencies (openmm, simbody, molmodel) and use them

obs:
nonbonded forces are not calculated inside rigid bodies (molmodel)


acum: 1 openmm plugin pt 1 dumm
1 dumm pt 1 topology (many topologies)

dim molecules x dim worlds (robots) = num dumm = num openmm plugin
openmm plugin is a mirror of the system (prmtop)
1 openmm with dim worlds (robots) nonbonded forces



eu:
compound graph? how does it work?


Generating precompiled headers.
```
grep -rohE '^\s*#include\s*<[^>]+>' /path/to/src /path/to/inc | sort -t: -u -k1,1 > pch/project_pch.h
```
Explaination:
* `grep -rohE '^\s*#include\s*<[^>]+>'`:
  * `r`: recursively
  * `o`: show only the matching part of the line
  * `h`: hide file name
  * `E`: use that regex expression
* `sort -t: -u -k1,1`: lexicographic sort and delete duplicates

OpenMM PCH:
```
grep -rohE '^\s*#include\s*<[^>]+>' --exclude-dir='.*' openmm/ | sort -t: -u -k1,1 > pch/openmm_pch.h
```

Simbody PCH:
```
grep -rohE '^\s*#include\s*<[^>]+>' --exclude-dir='.*' Simbody01/Simbody/ Simbody01/SimTKcommon/ Simbody01/SimTKmath/ | sort -t: -u -k1,1 > pch/simbody_pch.h

#include "SimTKcommon.h"
```

Molmodel PCH:
```
grep -rohE '^\s*#include\s*<[^>]+>' --exclude-dir='.*' Molmodel/src/ Molmodel/include/ | sort -t: -u -k1,1 > pch/molmodel_pch.h

#include "Simbody.h"
#include "OpenMM.h"
```

Robosample PCH:
```
echo "#pragma once"

grep -rohE '^\s*#include\s*<[^>]+>' --exclude-dir='.*' src/ include/ | sort -t: -u -k1,1 > pch/robosample_pch.h

#include "OpenMM.h"
#include "Simbody.h"
#include "Molmodel.h"
```










cmake -G "Unix Makefiles" ../ -D CMAKE_BUILD_TYPE=PGO_Train -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++ -D OPENMM_PLATFORM=OPENCL





cmake -G Ninja ../ -D CMAKE_BUILD_TYPE=PGO_Train -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++ -D OPENMM_PLATFORM=CUDA

mkdir build
cd build
cmake -G Ninja ../ -D CMAKE_BUILD_TYPE=PGO_Train -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++ -D OPENMM_PLATFORM=OPENCL && ninja robosample.pgo.train && rm profile-data/ -rf && bash pgo.sh && cmake -G Ninja ../ -D CMAKE_BUILD_TYPE=PGO_Use -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++ -D OPENMM_PLATFORM=OPENCL && ninja robosample.pgo.use
./robosample.pgo.use inp.aper | grep elapsed

mkdir build
cd build
cmake -G Ninja ../ -D CMAKE_BUILD_TYPE=PGO_Train -D CMAKE_C_COMPILER=gcc -D CMAKE_CXX_COMPILER=g++ -D OPENMM_PLATFORM=OPENCL && ninja robosample.pgo.train && rm profile-data/ -rf && bash pgo.sh && cmake -G Ninja ../ -D CMAKE_BUILD_TYPE=PGO_Use -D CMAKE_C_COMPILER=gcc -D CMAKE_CXX_COMPILER=g++ -D OPENMM_PLATFORM=OPENCL && ninja robosample.pgo.use
./robosample.pgo.use inp.aper | grep elapsed




un input de flexibilitati are pt un prmtop cu n legaturi are n linii cu 5 valori:
  i0_prmtop i1_prmtop i0_bat i1_bat joint_type
ordinea legaturilor este cea in care se vor adauga legaturile in sistem